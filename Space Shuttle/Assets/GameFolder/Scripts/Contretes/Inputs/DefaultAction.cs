//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/GameFolder/Scripts/Contretes/Inputs/DefaultAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace SpaceShuttle.Inputs
{
    public partial class @DefaultAction : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @DefaultAction()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""DefaultAction"",
    ""maps"": [
        {
            ""name"": ""Astronaut"",
            ""id"": ""39fcd477-060e-4eb7-a6fb-a49d103c2578"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""2f654172-5a4e-4e67-b528-e657066070bd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Gun"",
                    ""type"": ""Value"",
                    ""id"": ""907e6e79-158c-4eb4-9e13-69789e5e55af"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f7371caf-f005-4e4a-8f61-9695bf9ab878"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e6d81190-b186-4285-8db9-736def7444ac"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gun"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Astronaut
            m_Astronaut = asset.FindActionMap("Astronaut", throwIfNotFound: true);
            m_Astronaut_Move = m_Astronaut.FindAction("Move", throwIfNotFound: true);
            m_Astronaut_Gun = m_Astronaut.FindAction("Gun", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Astronaut
        private readonly InputActionMap m_Astronaut;
        private IAstronautActions m_AstronautActionsCallbackInterface;
        private readonly InputAction m_Astronaut_Move;
        private readonly InputAction m_Astronaut_Gun;
        public struct AstronautActions
        {
            private @DefaultAction m_Wrapper;
            public AstronautActions(@DefaultAction wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Astronaut_Move;
            public InputAction @Gun => m_Wrapper.m_Astronaut_Gun;
            public InputActionMap Get() { return m_Wrapper.m_Astronaut; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(AstronautActions set) { return set.Get(); }
            public void SetCallbacks(IAstronautActions instance)
            {
                if (m_Wrapper.m_AstronautActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_AstronautActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_AstronautActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_AstronautActionsCallbackInterface.OnMove;
                    @Gun.started -= m_Wrapper.m_AstronautActionsCallbackInterface.OnGun;
                    @Gun.performed -= m_Wrapper.m_AstronautActionsCallbackInterface.OnGun;
                    @Gun.canceled -= m_Wrapper.m_AstronautActionsCallbackInterface.OnGun;
                }
                m_Wrapper.m_AstronautActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @Gun.started += instance.OnGun;
                    @Gun.performed += instance.OnGun;
                    @Gun.canceled += instance.OnGun;
                }
            }
        }
        public AstronautActions @Astronaut => new AstronautActions(this);
        public interface IAstronautActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnGun(InputAction.CallbackContext context);
        }
    }
}
